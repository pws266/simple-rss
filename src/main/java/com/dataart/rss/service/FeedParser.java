package main.java.com.dataart.rss.service;

import javax.xml.stream.XMLEventReader;
import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.events.Characters;
import javax.xml.stream.events.XMLEvent;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;

import main.java.com.dataart.rss.data.FeedChannel;
import main.java.com.dataart.rss.data.FeedItem;

import static javax.xml.stream.XMLInputFactory.IS_COALESCING;
import static main.java.com.dataart.rss.data.Reference.*;
/**
 * RSS 2.0 feeds parser. Reads items in RSS XML file sequentially
 *
 * @author Sergey Sokhnyshev
 * Created by newbie on 05.10.17.
 */
public class FeedParser {
    private XMLEventReader reader;  // XML tag reader

    private FeedItem currentItem;       // RSS item/channel than have been read by "readNextItem" method
    private int readItemsNumber = 0;    // RSS-items number that have been read

    private String readStringValue(XMLEventReader eventReader) throws XMLStreamException {
        XMLEvent event = eventReader.nextEvent();
        return (event instanceof Characters) ? event.asCharacters().getData() : "";
    }

    // returns event reader for further RSS XML parsing
    private static XMLEventReader getEventReader(URL url) throws XMLStreamException, IOException {
        XMLInputFactory inputFactory = XMLInputFactory.newInstance();
        // necessary for correct XML special symbols(e.g. &lt; &gt; &nbsp;, etc) reading
        inputFactory.setProperty(IS_COALESCING, true);

        InputStream in = url.openStream();
        return inputFactory.createXMLEventReader(in);
    }

    // returns URL generated by specified link
    private static URL getUrl(String link) throws MalformedURLException {
        return new URL(link);
    }

    // returns event reader for specified RSS-channel link
    private static XMLEventReader getEventReader(String link) throws XMLStreamException, IOException {
        URL feedUrl = getUrl(link);
        return getEventReader(feedUrl);
    }

    // reads next RSS item or channel from RSS XML file
    public boolean readNextItem(boolean isReadChannelHeader) throws XMLStreamException {
        currentItem.reset();

        while (reader.hasNext()) {
            XMLEvent event = reader.nextEvent();

            if (event.isStartElement()) {
                String localPart = event.asStartElement().getName().getLocalPart();

                switch (localPart) {
                    case TAG_CHANNEL:
                        currentItem.reset();
                        break;

                    case TAG_ITEM:
                        if (isReadChannelHeader) {
                            return true;
                        }

                        currentItem.reset();
                        break;

                    case TAG_TITLE:
                        currentItem.setTitle(readStringValue(reader));
                        break;

                    case TAG_LINK:
                        currentItem.setLink(readStringValue(reader));
                        break;

                    case TAG_DESCRIPTION:
                        currentItem.setDescription(readStringValue(reader));
                        break;

                    case TAG_PUBDATE:
                        currentItem.setPubDate(readStringValue(reader));
                        break;

                    case TAG_GUID:
                        currentItem.setGuid(readStringValue(reader));
                        break;


                }
            } else if (event.isEndElement()) {
                if (TAG_ITEM.equals(event.asEndElement().getName().getLocalPart())) {
                    ++readItemsNumber;
                    return true;
                }
            }
        }

        return false;
    }

    public FeedParser() {
        currentItem = new FeedItem();
    }

    public FeedItem getCurrentItem() {
        return currentItem;
    }

    public int getReadItemsNumber() {
        return readItemsNumber;
    }

    public boolean hasNextItem() {
        return reader.hasNext();
    }

    public static boolean isCorrectRssLink(String link) {
        int rssTagCounter = 0;
        XMLEventReader eventReader = null;

        try {
            URL testUrl = getUrl(link);
            testUrl.toURI();

            eventReader = getEventReader(testUrl);

            // reading XML document
            while (eventReader.hasNext()) {
                XMLEvent event = eventReader.nextEvent();

                if (event.isStartElement() || event.isEndElement()) {
                    String localPart = event.isStartElement() ? event.asStartElement().getName().getLocalPart() :
                                                                event.asEndElement().getName().getLocalPart();
                    switch (localPart) {
                        case TAG_RSS:
                        case TAG_CHANNEL:
                            rssTagCounter++;
                            break;
                    }
                }
            }
        } catch (IOException | URISyntaxException | XMLStreamException exc) {
            return false;
        } finally {
            if (eventReader != null) {
                try {
                    eventReader.close();
                } catch (XMLStreamException exc) {
                    // to logger
                }
            }
        }

        return rssTagCounter == CORRECT_RSS_TAGS_NUMBER;
    }

    public void openRssLink(String rssLink) throws XMLStreamException, IOException {
        readItemsNumber = 0;
        reader = getEventReader(getUrl(rssLink));
    }

    public void closeRssLink() throws XMLStreamException {
        if (reader != null) {
            reader.close();
        }
    }

    public static void main(String[] args) throws XMLStreamException, IOException {
        FeedParser parser = new FeedParser();
        // >parser.setUrl("http://www.ixbt.com/export/news.rss");

        String rssLink = "http://www.ixbt.com/export/news.rss";
        parser.openRssLink(rssLink);

        parser.readNextItem(true);
        FeedChannel channel = new FeedChannel(rssLink, parser.getCurrentItem().getTitle(),
                                              parser.getCurrentItem().getLink(),
                                              parser.getCurrentItem().getDescription());
        System.out.println(channel);

        boolean isRead = false;

        while (parser.hasNextItem()) {
            isRead = parser.readNextItem(false);

            if (isRead) {
                System.out.println(parser.getCurrentItem());
            }

        }

        parser.closeRssLink();

        System.out.println("Items number: " + parser.getReadItemsNumber());
    }
}
